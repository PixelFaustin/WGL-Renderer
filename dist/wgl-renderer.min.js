!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(e,t,r){"use strict"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,r,n,i){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.copyFromImage=function(e){return a.gl.bindTexture(a.gl.TEXTURE_2D,a.texture),a.gl.texImage2D(a.gl.TEXTURE_2D,a.level,a.internalFormat,a.srcFormat,a.srcType,e),isPowerOf2(e.width)&&isPowerOf2(e.height)&&a.gl.generateMipmap(a.gl.TEXTURE_2D),a},this.texture=t.createTexture(),t.bindTexture(t.TEXTURE_2D,this.texture),this.level=0,this.internalFormat=t[i.srcFormat||"RGBA"];this.srcFormat=t[i.srcFormat||"RGBA"],this.srcType=t[i.srcType||"UNSIGNED_BYTE"];var o=new Uint8Array([255,255,255,255]);t.texImage2D(t.TEXTURE_2D,level,internalFormat,r,n,0,srcFormat,srcType,o),this.description=Object.assign({width:r,height:n},i),this.gl=t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){var e=this;this.bufferFromMemory=function(t){return gl.bindBuffer(e.gl.ELEMENT_ARRAY_BUFFER,e.vbo),e.gl.bufferData(e.gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),e.gl[e.hint]),e}};t.default=function e(t,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n.call(this),this.vbo=t.createBuffer(),this.hint=r,t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.vbo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,i,this.gl[this.hint]),this.gl=t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(t,r,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.bufferFromMemory=function(e){return i.gl.bindBuffer(i.gl.ARRAY_BUFFER,i.vbo),i.gl.bufferData(i.gl.ARRAY_BUFFER,new Float32Array(e),i.gl[i.hint]),i},this.vbo=t.createBuffer(),this.hint=r,t.bindBuffer(t.ARRAY_BUFFER,this.vbo),t.bufferData(t.ARRAY_BUFFER,n,t[r]),this.gl=t}},function(e,t,r){"use strict";var n,i=r(0),a=(n=i)&&n.__esModule?n:{default:n};Object.create(a.default)},function(e,t,r){"use strict"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n(r(5)),n(r(4)),n(r(0));function n(e){return e&&e.__esModule?e:{default:e}}t.default=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.initialize=function(e,r){t.gl=e,t.canvas=r},this.resize=function(){var e=t.canvas.clientWidth,r=t.canvas.clientHeight;t.canvas.width==e&&t.canvas.height==r||(t.canvas.width=e,t.canvas.height=r)},this.draw=function(e,r,n,i,a){i.renderState,i.shaderProgram;var o=i.vertexArray,l=o.position,u=o.normal,s=o.uv,c=o.index;t.shaderProgram.bind(),t.shaderProgram.setAutomatics(t,i,a),t.gl.bindBuffer(t.gl.ARRAY_BUFFER,l),u&&t.gl.bindBuffer(t.gl.ARRAY_BUFFER,u),s&&t.gl.bindBuffer(t.gl.ARRAY_BUFFER,s),t.texturesDirty&&(t.textureUnits.forEach(function(e){t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_S,e.sampler.wrapS),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_WRAP_T,e.sampler.wrapT),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MIN_FILTER,e.sampler.minificationFilter),t.gl.texParameteri(t.gl.TEXTURE_2D,t.gl.TEXTURE_MAG_FILTER,e.sampler.magnificationFilter),t.gl.bindTexture(t.gl.TEXTURE_2D,e.texture)}),t.texturesDirty=!1),t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,c),t.gl.drawElements(e,n,t.gl.UNSIGNED_SHORT,r)},this.clear=function(e){t.gl.clearColor(e.color.r,e.color.g,e.color.b,e.color.a),t.gl.clear(t.gl.COLOR_BUFFER_BIT)},this.viewport={x:0,y:0,w:0,h:0},this.framebuffer=void 0,this.textureUnits=[{texture:null,sampler:null}],this.texturesDirty=!1}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Device=void 0;var n=l(r(6)),i=l(r(3)),a=l(r(2)),o=l(r(1));function l(e){return e&&e.__esModule?e:{default:e}}var u={createContext:function(e,t){if(e){if((void 0).gl=e.getContext("webgl",t),!(void 0).gl)throw new Error("Could not initialize webgl context! Your browser or hardware does not support WebGL");return(void 0).context=new n.default,(void 0).context.initialize((void 0).gl,(void 0).canvas),(void 0).context}},createVertexBuffer:function(e,t){return new i.default((void 0).gl,e,t)},createIndexBuffer:function(e,t){return new a.default((void 0).gl,e,t)},createTexture2D:function(e,t,r){return new o.default((void 0).gl,e,t,r)}};t.Device=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,